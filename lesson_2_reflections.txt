When you initialise a new repository, git creates a master branch with zero initial commits. You need to do this so that you can then add files to your master branch.

The staging area differs from the working directory because it is a temporary place where you can add commits before confirming them. This offers the value of allowing you to edit changes before committing.

You can use the staging area to ensure you have only one commit per change because this enables you to monitor the difference between changes and commit each change one by one.

Branches are helpful when you want to make multiple versions of your document available to use (eg. English version, Italian version, experimental version). They are also helpful whenever you are moving on to a new feature or new piece of work. You may have an experimental/unique feature branch and your production-quality branch. You might also use branches to keep features organised when you have multiple collaborators.

Diagrams help you visualise the branch structure by showing you which commits are on each branch. You can use this information to help you navigate between branches, edit commits, and see which branches are reachable.

When you merge two branches together you get a combined branch that includes all of the history of the previous commits. You would use the merge command to combine work that was done by different users on the end file.

The pros of Gitâ€™s automatic merging is that it can merge two branches where it is clear what changes are to be kept. It is helpful that Git does not automatically merge branches where there is a conflict; this is because it enables the user to decide which changes he/she would like to keep on both branches. The obvious downside to this is that it can involve manually looking through all changes, which can be time consuming. However, Git makes this process easier for us by clearing identifying where the merge conflict exists.